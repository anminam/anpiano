{"version":3,"sources":["Core/piano/actions.ts","Core/Utils.ts","Core/Piano.ts","Containers/piano/Key.tsx","Containers/PianoKyes.tsx","Components/Button.tsx","Containers/PainoConfig.tsx","App/App.tsx","serviceWorker.ts","Core/piano/reducer.ts","Core/Store.ts","index.tsx"],"names":["setConfig","name","value","type","payload","Utils","start","this","sacleWhite","map","v","list","forEach","push","sacleBlack","includes","end","makeScaleAll","i","getKeyTones","newList","tone","isValue","startTone","key","result","keyObj","hasOwnProperty","Object","keys","find","target","targetMinusShap","replace","parentTone","document","querySelector","getBoundingClientRect","x","positionStart","a","w","s","e","d","f","t","g","y","h","u","j","k","synth","Tone","toDestination","Piano","triggerAttackRelease","note","duration","time","velocity","Key","isActive","onMouseDown","onMouseUp","isPrintTone","useSelector","state","piano","config","isTonePrint","isKeyboradPrint","useState","blackPosition","setBlackPosition","isPrime","isHavePrime","useEffect","getBlackPosition","className","trigger","style","left","data-tone","getKeyByTone","PianoKyes","tones","dispatch","useDispatch","pressKey","pianoTrigger","upKey","pianoRelese","getTone","getKeyToTone","index","findIndex","toneObj","handleKeyMouseDown","handleKeyMouseUp","onKeyPress","event","onKeyUp","tabIndex","item","Button","text","onClick","PainoConfig","id","checked","onChange","htmlFor","App","getScale5","now","Boolean","window","location","hostname","match","initState","initTones","pianoReducer","actions","newTones","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.48fd3163.chunk.js","sourcesContent":["import { IKeyTone } from \"Interface/IKeyTone\";\nimport { TPianoConfigValue } from \"Interface/IPianoConfig\";\n\nexport const PIANO_TRIGGER = \"PIANO_TRIGGER\" as const;\nexport const PIANO_RELEASE = \"PIANO_RELEASE\" as const;\nexport const SET_PRINT_TONE = \"SET_PRINT_TONE\" as const;\nexport const SET_CONFIG = \"SET_CONFIG\" as const;\n\nexport const pianoTrigger = (tone: IKeyTone) => {\n  return {\n    type: PIANO_TRIGGER,\n    payload: tone,\n  };\n};\n\nexport const pianoRelese = (tone: IKeyTone) => {\n  return {\n    type: PIANO_RELEASE,\n    payload: tone,\n  };\n};\n\nexport const setPrintTone = (isTone: boolean) => {\n  return {\n    type: SET_PRINT_TONE,\n    payload: isTone,\n  };\n};\n\nexport const setConfig = (name: string, value: TPianoConfigValue) => {\n  return {\n    type: SET_CONFIG,\n    payload: {\n      name,\n      value,\n    },\n  };\n};\n\nexport type PianoActions =\n  | ReturnType<typeof pianoTrigger>\n  | ReturnType<typeof pianoRelese>\n  | ReturnType<typeof setPrintTone>\n  | ReturnType<typeof setConfig>;\n","import { IKeyTone } from \"Interface/IKeyTone\";\nimport { IToneKeyboard } from \"Interface/IToneKeyboard\";\nimport { Tone } from \"tone/build/esm/core/Tone\";\ninterface IKeyValue {\n  [key: string]: IKeyTone;\n}\nexport class Utils {\n  static sacleWhite = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\n  static sacleBlack = [\"C\", \"D\", \"F\", \"G\", \"A\"];\n\n  static makeScale(start: number): IKeyTone[] {\n    return this.sacleWhite.map((v) => (v + start) as IKeyTone);\n  }\n  static makeScaleAll(start: number): IKeyTone[] {\n    let list: IKeyTone[] = [];\n    this.sacleWhite.forEach((v) => {\n      list.push((v + start) as IKeyTone);\n      if (this.sacleBlack.includes(v)) {\n        list.push((v + \"#\" + start) as IKeyTone);\n      }\n    });\n    return list;\n  }\n\n  static getKeyTones(start: number, end: number = 0): IKeyTone[] {\n    if (end === 0) {\n      return this.makeScaleAll(start);\n    }\n\n    let list: IKeyTone[] = [];\n    for (let i = start; i <= end; i++) {\n      // list.push(\"C1\");\n      list = [...list, ...this.makeScaleAll(i)];\n    }\n    return list;\n  }\n\n  static initTones(start: number, end: number = 0): IToneKeyboard[] {\n    const list = Utils.getKeyTones(start, end);\n\n    const newList: IToneKeyboard[] = [];\n    list.forEach((v) => {\n      newList.push({\n        tone: v,\n        isValue: false,\n      });\n    });\n\n    return newList;\n  }\n\n  static getScale5(startTone: IKeyTone): IKeyTone[] {\n    const a: IKeyTone[] = [\n      \"C3\",\n      \"D3\",\n      \"E3\",\n      \"F3\",\n      \"G3\",\n      \"F3\",\n      \"E3\",\n      \"D3\",\n      \"C3\",\n    ];\n\n    return a;\n  }\n\n  static keyObj: IKeyValue = {\n    a: \"C3\" as IKeyTone,\n    w: \"C#3\" as IKeyTone,\n    s: \"D3\" as IKeyTone,\n    e: \"D#3\" as IKeyTone,\n    d: \"E3\" as IKeyTone,\n    f: \"F3\" as IKeyTone,\n    t: \"F#3\" as IKeyTone,\n    g: \"G3\" as IKeyTone,\n    y: \"G#3\" as IKeyTone,\n    h: \"A3\" as IKeyTone,\n    u: \"A#3\" as IKeyTone,\n    j: \"B3\" as IKeyTone,\n    i: \"B#3\" as IKeyTone,\n    k: \"C4\" as IKeyTone,\n  };\n\n  static getKeyToTone(key: string): IKeyTone | undefined {\n    let result: IKeyTone | undefined;\n\n    if (Utils.keyObj.hasOwnProperty(key)) {\n      result = Utils.keyObj[key];\n    }\n    return result;\n  }\n\n  static getKeyByTone(tone: IKeyTone): string {\n    const result = Object.keys(this.keyObj).find(\n      (v) => this.keyObj[v] === tone\n    );\n    return result as string;\n  }\n\n  static positionStart = 30;\n  static getBlackPosition(target: IKeyTone): number {\n    if (!target.includes(\"#\")) {\n      return 0;\n    }\n\n    const targetMinusShap = target.replace(\"#\", \"\");\n    const parentTone = document.querySelector(`[data-tone=${targetMinusShap}]`);\n    const parnetToneX =\n      (parentTone?.getBoundingClientRect().x || 0) + this.positionStart;\n\n    return parnetToneX;\n  }\n\n  static isPrime(tone: IKeyTone): boolean {\n    if (tone.includes(\"E\") || tone.includes(\"B\")) {\n      return false;\n    }\n\n    return true;\n  }\n}\n","import { IKeyTone } from \"Interface/IKeyTone\";\nimport * as Tone from \"tone\";\nimport { Frequency, NormalRange, Time } from \"tone/build/esm/core/type/Units\";\nconst synth = new Tone.Synth().toDestination();\n\nexport class Piano {\n  static trigger(tone: IKeyTone) {\n    synth.triggerAttackRelease(tone, \"8n\");\n  }\n\n  static triggerAttackRelease(\n    note: Frequency,\n    duration: Time,\n    time?: Time,\n    velocity?: NormalRange\n  ) {}\n}\n","import React, { useEffect, useState } from \"react\";\nimport { IKeyTone } from \"Interface/IKeyTone\";\nimport { Utils } from \"Core/Utils\";\nimport { Piano } from \"Core/Piano\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"Core/Store\";\n\n// const now = Tone.now();\n\ninterface IProps {\n  tone: IKeyTone;\n  isActive: boolean;\n  onMouseDown: (tone: IKeyTone) => void;\n  onMouseUp: (tone: IKeyTone) => void;\n}\nconst Key = ({ tone, isActive, onMouseDown, onMouseUp }: IProps) => {\n  const isPrintTone = useSelector(\n    (state: RootState) => state.piano.config.isTonePrint\n  );\n  const isKeyboradPrint = useSelector(\n    (state: RootState) => state.piano.config.isKeyboradPrint\n  );\n  const [blackPosition, setBlackPosition] = useState<number>();\n  const [isHavePrime] = useState<boolean>(Utils.isPrime(tone));\n\n  useEffect(() => {\n    setBlackPosition(Utils.getBlackPosition(tone));\n  }, [tone]);\n\n  const className = `key ${tone.includes(\"#\") ? \"black\" : \"white\"} ${\n    isHavePrime ? \"prime\" : \"\"\n  }\n  ${isActive ? \"active\" : \"\"}`;\n\n  useEffect(() => {\n    if (isActive) {\n      Piano.trigger(tone);\n    } else {\n    }\n  }, [isActive]);\n\n  return (\n    <div\n      className={className}\n      style={{ left: blackPosition }}\n      onMouseDown={() => onMouseDown(tone)}\n      onMouseUp={() => onMouseUp(tone)}\n      data-tone={tone}\n    >\n      <div className=\"label\">\n        {isKeyboradPrint && (\n          <div className=\"key__key_name\">{Utils.getKeyByTone(tone)}</div>\n        )}\n        {isPrintTone && <div className=\"key__tone_name\">{tone}</div>}\n      </div>\n    </div>\n  );\n};\n\nexport default Key;\n","import { pianoRelese, pianoTrigger } from \"Core/piano/actions\";\nimport { RootState } from \"Core/Store\";\nimport { Utils } from \"Core/Utils\";\nimport { IKeyTone } from \"Interface/IKeyTone\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Key from \"./piano/Key\";\n\ninterface IProps {}\nconst PianoKyes = ({}: IProps) => {\n  const tones = useSelector((state: RootState) => state.piano.tones);\n  const dispatch = useDispatch();\n\n  const pressKey = (tone: IKeyTone) => {\n    dispatch(pianoTrigger(tone));\n  };\n\n  const upKey = (tone: IKeyTone) => {\n    dispatch(pianoRelese(tone));\n  };\n\n  const getTone = (key: string): IKeyTone | null => {\n    let value = Utils.getKeyToTone(key);\n    if (!value) return null;\n    const index = tones?.findIndex((v) => {\n      return v.tone === value;\n    });\n    const toneObj = tones[index];\n    if (!toneObj) return null;\n\n    return toneObj.tone;\n  };\n\n  // 키보드\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    const tone = getTone(event.key);\n    if (!tone) return;\n    pressKey(tone);\n  };\n\n  const handleKeyUp = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    const tone = getTone(event.key);\n    if (!tone) return;\n    upKey(tone);\n  };\n\n  // 마우스\n  const handleKeyMouseDown = (tone: IKeyTone) => {\n    pressKey(tone);\n  };\n  const handleKeyMouseUp = (tone: IKeyTone) => {\n    upKey(tone);\n  };\n\n  return (\n    <div\n      className=\"piano-kyes\"\n      onKeyPress={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      tabIndex={0}\n    >\n      <div className=\"piano-kyes__whites\">\n        {tones &&\n          tones.map((item) => {\n            return (\n              <Key\n                key={item.tone}\n                tone={item.tone}\n                onMouseDown={handleKeyMouseDown}\n                onMouseUp={handleKeyMouseUp}\n                isActive={item.isValue}\n              />\n            );\n          })}\n      </div>\n    </div>\n  );\n};\n\nexport default PianoKyes;\n","import React from \"react\";\n\ninterface IProps {\n  text: string;\n  onClick: () => void;\n}\nconst Button = ({ text, onClick }: IProps) => {\n  return (\n    <button className={`mini`} onClick={onClick}>\n      {text}\n    </button>\n  );\n};\n\nexport default Button;\n","import { setConfig, setPrintTone } from \"Core/piano/actions\";\nimport { RootState } from \"Core/Store\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst PainoConfig = () => {\n  const dispatch = useDispatch();\n\n  const isPrintTone = useSelector(\n    (state: RootState) => state.piano.config.isTonePrint\n  );\n  const handleIsPrintCheckboxChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const { checked } = event.target;\n    dispatch(setConfig(\"isTonePrint\", checked));\n  };\n\n  const isKeyboradPrint = useSelector(\n    (state: RootState) => state.piano.config.isKeyboradPrint\n  );\n\n  const handleIsKeyboardPrintCheckboxChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const { checked } = event.target;\n    dispatch(setConfig(\"isKeyboradPrint\", checked));\n  };\n  return (\n    <div className=\"piano_config\">\n      <ul>\n        <li>\n          <input\n            type=\"checkbox\"\n            id=\"isPrintBox\"\n            checked={isPrintTone}\n            onChange={handleIsPrintCheckboxChange}\n          />\n          <label htmlFor=\"isPrintBox\">음계 보이기</label>\n        </li>\n        <li>\n          <input\n            type=\"checkbox\"\n            id=\"isKeyboardPrintCheckBox\"\n            checked={isKeyboradPrint}\n            onChange={handleIsKeyboardPrintCheckboxChange}\n          />\n          <label htmlFor=\"isKeyboardPrintCheckBox\">키보드 보이기</label>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default PainoConfig;\n","import React from \"react\";\nimport PianoKyes from \"Containers/PianoKyes\";\nimport { Utils } from \"Core/Utils\";\nimport * as Tone from \"tone\";\nimport Button from \"Components/Button\";\nimport PainoConfig from \"Containers/PainoConfig\";\n\nconst synth = new Tone.Synth().toDestination();\n\nfunction App() {\n  const handleScale = () => {\n    const list = Utils.getScale5(\"C3\");\n    const now = Tone.now();\n    list.forEach((v, i) => synth.triggerAttackRelease(v, \"8n\", now + i * 0.5));\n  };\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <PianoKyes />\n        <PainoConfig />\n        <Button text=\"화음\" onClick={handleScale} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Utils } from \"Core/Utils\";\nimport { IPianoConfig } from \"Interface/IPianoConfig\";\nimport { IToneKeyboard } from \"Interface/IToneKeyboard\";\nimport {\n  PianoActions,\n  PIANO_RELEASE,\n  PIANO_TRIGGER,\n  SET_CONFIG,\n  SET_PRINT_TONE,\n} from \"./actions\";\n\ninterface IState {\n  tones: IToneKeyboard[];\n  config: IPianoConfig;\n}\n\nconst temp = Utils.initTones(3, 4);\nconst initState: IState = {\n  tones: temp,\n  config: {\n    isTonePrint: true,\n    isKeyboradPrint: false,\n  },\n};\n\nconst pianoReducer = (state: IState = initState, actions: PianoActions) => {\n  switch (actions.type) {\n    case PIANO_TRIGGER:\n      const tone = actions.payload;\n      const index = state.tones.findIndex((v) => v.tone === tone);\n      const newTones = [...state.tones];\n      newTones[index].isValue = true;\n      return {\n        ...state,\n        tones: [...newTones],\n      };\n    case PIANO_RELEASE: {\n      const tone = actions.payload;\n      const index = state.tones.findIndex((v) => v.tone === tone);\n      const newTones = [...state.tones];\n      newTones[index].isValue = false;\n      return {\n        ...state,\n        tones: [...newTones],\n      };\n    }\n    case SET_PRINT_TONE:\n      return {\n        ...state,\n        isPrintTone: actions.payload,\n      };\n    case SET_CONFIG:\n      return {\n        ...state,\n        config: {\n          ...state.config,\n          [actions.payload.name]: actions.payload.value,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport default pianoReducer;\n","import pianoReducer from \"Core/piano/reducer\";\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nconst rootReducer = combineReducers({ piano: pianoReducer });\nlet store: any;\n\n// 추후 디버거 생성\nstore = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\nexport type RootState = ReturnType<typeof rootReducer>;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"App/App\";\nimport \"styles/index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"Core/Store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}