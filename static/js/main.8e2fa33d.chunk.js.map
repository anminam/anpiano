{"version":3,"sources":["Core/Utils.ts","Containers/piano/Key.tsx","Containers/PianoKyes.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Utils","start","this","sacleWhite","map","v","list","forEach","push","sacleBlack","includes","end","makeScaleAll","i","startTone","key","result","obj","a","w","s","e","d","f","t","g","y","h","u","j","k","hasOwnProperty","target","targetMinusShap","replace","parentTone","document","querySelector","getBoundingClientRect","x","positionStart","synth","Tone","toDestination","Key","tone","trigger","tones","useState","blackPosition","setBlackPosition","active","setActive","_trigger","setTrigger","useEffect","getBlackPosition","triggerAttackRelease","className","style","left","onMouseDown","setTimeout","data-tone","PianoKyes","setTones","getKeyTones","newList","isValue","updateTones","index","undefined","array","onKeyPress","event","value","getKeyToTone","findIndex","onKeyUp","tabIndex","item","App","onClick","getScale5","now","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8e2fa33d.chunk.js","sourcesContent":["import { IKeyTone } from \"Interface/IKeyTone\";\n\nexport class Utils {\n  static sacleWhite = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\n  static sacleBlack = [\"C\", \"D\", \"F\", \"G\", \"A\"];\n\n  static makeScale(start: number): IKeyTone[] {\n    return this.sacleWhite.map((v) => (v + start) as IKeyTone);\n  }\n  static makeScaleAll(start: number): IKeyTone[] {\n    let list: IKeyTone[] = [];\n    this.sacleWhite.forEach((v) => {\n      list.push((v + start) as IKeyTone);\n      if (this.sacleBlack.includes(v)) {\n        list.push((v + \"#\" + start) as IKeyTone);\n      }\n    });\n    return list;\n  }\n\n  static getKeyTones(start: number, end: number = 0): IKeyTone[] {\n    if (end === 0) {\n      return this.makeScaleAll(start);\n    }\n\n    let list: IKeyTone[] = [];\n    for (let i = start; i <= end; i++) {\n      // list.push(\"C1\");\n      list = [...list, ...this.makeScaleAll(i)];\n    }\n    return list;\n  }\n\n  static getScale5(startTone: IKeyTone): IKeyTone[] {\n    const a: IKeyTone[] = [\n      \"C3\",\n      \"D3\",\n      \"E3\",\n      \"F3\",\n      \"G3\",\n      \"F3\",\n      \"E3\",\n      \"D3\",\n      \"C3\",\n    ];\n\n    return a;\n  }\n\n  static getKeyToTone(key: string): IKeyTone | undefined {\n    let result: IKeyTone | undefined;\n    interface IKeyValue {\n      [key: string]: IKeyTone;\n    }\n    const obj: IKeyValue = {\n      a: \"C3\" as IKeyTone,\n      w: \"C#3\" as IKeyTone,\n      s: \"D3\" as IKeyTone,\n      e: \"D#3\" as IKeyTone,\n      d: \"E3\" as IKeyTone,\n      f: \"F3\" as IKeyTone,\n      t: \"F#3\" as IKeyTone,\n      g: \"G3\" as IKeyTone,\n      y: \"G#3\" as IKeyTone,\n      h: \"A3\" as IKeyTone,\n      u: \"A#3\" as IKeyTone,\n      j: \"B3\" as IKeyTone,\n      i: \"B#3\" as IKeyTone,\n      k: \"C4\" as IKeyTone,\n    };\n\n    if (obj.hasOwnProperty(key)) {\n      result = obj[key];\n    }\n    return result;\n  }\n\n  static positionStart = 30;\n  static getBlackPosition(target: IKeyTone): number {\n    if (!target.includes(\"#\")) {\n      return 0;\n    }\n\n    const targetMinusShap = target.replace(\"#\", \"\");\n    const parentTone = document.querySelector(`[data-tone=${targetMinusShap}]`);\n    const parnetToneX =\n      (parentTone?.getBoundingClientRect().x || 0) + this.positionStart;\n\n    return parnetToneX;\n  }\n}\n","import React, { useEffect, useState } from \"react\";\nimport { IKeyTone } from \"Interface/IKeyTone\";\nimport { Utils } from \"Core/Utils\";\nimport * as Tone from \"tone\";\nconst synth = new Tone.Synth().toDestination();\n// const now = Tone.now();\n\ninterface IProps {\n  tone: IKeyTone;\n  tones?: IKeyTone[];\n  trigger?: boolean;\n  onToneClick?: () => void;\n}\nconst Key = ({ tone, tones, trigger }: IProps) => {\n  const [blackPosition, setBlackPosition] = useState<number>();\n  const [active, setActive] = useState<boolean>(false);\n  const [_trigger, setTrigger] = useState<boolean>(false);\n\n  useEffect(() => {\n    setTrigger(trigger ? true : false);\n  }, [trigger]);\n\n  useEffect(() => {\n    setBlackPosition(Utils.getBlackPosition(tone));\n  }, [tone]);\n\n  useEffect(() => {\n    if (_trigger) {\n      setActive(true);\n      start();\n    } else {\n      setActive(false);\n    }\n  }, [_trigger]);\n\n  const start = () => {\n    // const now = Tone.now();\n\n    synth.triggerAttackRelease(tone, \"8n\");\n  };\n\n  const handleClick = () => {\n    setTrigger(true);\n    setTimeout(() => {\n      setTrigger(false);\n    }, 500);\n  };\n\n  const className = `key ${tone.includes(\"#\") ? \"black\" : \"\"} ${\n    active ? \"active\" : \"\"\n  }`;\n\n  return (\n    <div\n      className={className}\n      style={{ left: blackPosition }}\n      onMouseDown={handleClick}\n      data-tone={tone}\n    >\n      <span className=\"key__name\">{tone}</span>\n    </div>\n  );\n};\n\nexport default Key;\n","import { Utils } from \"Core/Utils\";\nimport { IKeyTone } from \"Interface/IKeyTone\";\nimport React, { useEffect, useState } from \"react\";\nimport Key from \"./piano/Key\";\n\ninterface IToneKeyboard {\n  tone: IKeyTone;\n  isValue: boolean;\n}\ninterface IProps {}\nconst PianoKyes = ({}: IProps) => {\n  const [tones, setTones] = useState<IToneKeyboard[]>();\n\n  useEffect(() => {\n    const list = Utils.getKeyTones(3, 4);\n    const newList: IToneKeyboard[] = [];\n    list.forEach((v) => {\n      newList.push({\n        tone: v,\n        isValue: false,\n      });\n    });\n    setTones(newList);\n    // debugger;\n  }, []);\n\n  // 키보드\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    const key = event.key;\n    let value = Utils.getKeyToTone(key);\n\n    const index = tones?.findIndex((v) => {\n      return v.tone === value;\n    });\n\n    updateTones(true, index);\n  };\n\n  const handleKeyUp = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    const key = event.key;\n    let value = Utils.getKeyToTone(key);\n\n    const index = tones?.findIndex((v) => {\n      return v.tone === value;\n    });\n\n    updateTones(false, index);\n  };\n\n  const updateTones = (isValue: boolean, index?: number) => {\n    if (index === undefined || index === -1) {\n      return;\n    }\n\n    if (!tones) {\n      return;\n    }\n\n    try {\n      if (tones) {\n        const array: IToneKeyboard[] = [...tones];\n        array[index].isValue = isValue;\n        setTones(array);\n      }\n    } catch (e) {}\n  };\n\n  return (\n    <div\n      className=\"piano-kyes\"\n      onKeyPress={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      tabIndex={0}\n    >\n      <div\n        className=\"piano-kyes__whites\"\n        // onKeyDown={handleKeyDown}\n      >\n        {tones &&\n          tones.map((item) => {\n            return (\n              <Key\n                key={item.tone}\n                tone={item.tone}\n                trigger={item.isValue}\n                // tones={list}\n              />\n            );\n          })}\n      </div>\n    </div>\n  );\n};\n\nexport default PianoKyes;\n","import React from \"react\";\nimport PianoKyes from \"Containers/PianoKyes\";\nimport { Utils } from \"Core/Utils\";\nimport * as Tone from \"tone\";\nconst synth = new Tone.Synth().toDestination();\n\nfunction App() {\n  const handleScale = () => {\n    const list = Utils.getScale5(\"C3\");\n    const now = Tone.now();\n    list.forEach((v, i) => synth.triggerAttackRelease(v, \"8n\", now + i * 0.2));\n  };\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <PianoKyes />\n        <button onClick={handleScale}>화음</button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'App/App';\nimport 'styles/index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}